# two separate collections (company and person) with references

import pymongo
from faker import Faker
import random
import time

# connect to MongoDB
client = pymongo.MongoClient("mongodb://localhost:27017/")
db = client["lab2_db"]
companies_col = db["companies_m1"]
persons_col = db["persons_m1"]

# clean collections - to avoid issues when running multiple times 
companies_col.drop()
persons_col.drop()

# initialize faker and set the amount of data to generate 
fake = Faker()
num_companies = 100
num_persons_per_company = 1000  

# generate data for companies 
companies = []
for _ in range(num_companies):
    companies.append({
        "name": fake.company()})

# insert data into corresponding collection - retuns ids automatically generated by mongo
# for each document that was inserted 
company_ids = companies_col.insert_many(companies).inserted_ids

# generate data for persons 
persons = []
for company_id in company_ids:
    for _ in range(num_persons_per_company):
        birth_year = random.randint(1950, 2000)
        persons.append({
            "first_name": fake.first_name(),
            "last_name": fake.last_name(),
            "birth_year": birth_year,
            "age": 2024 - birth_year,
            "company_id": company_id}) # reference to the company - each company has an 
                                       # id and 1000 persons have the same id

# insert data into corresponding collection
persons_col.insert_many(persons)

# Q1: For each person, retrieve their full name and their company's name
start = time.time()
q1_results = persons_col.aggregate([
    {
        # Join persons collection with companies collection
        "$lookup": {
            "from": "companies_m1",           # Target collection to join
            "localField": "company_id",       # Field from persons collection
            "foreignField": "_id",            # Field from companies collection
            "as": "company"                   # Name for the joined array
        }
    },
    {
        # Convert the array previously created to a single object
        # (since each person belongs to one company)
        "$unwind": "$company"
    },
    {
        # Project only the required fields and create computed fields
        "$project": {
            "_id": 0,                                                    # Exclude the _id field
            "full_name": {"$concat": ["$first_name", " ", "$last_name"]}, # Concatenate first and last name
            "company_name": "$company.name"}}])                              # Extract company name from joined data

q1_time = time.time() - start
print(f"Q1 execution time: {q1_time:.4f}s")

# Q2: For each company, retrieve its name and the number of employees
start = time.time()
q2_results = persons_col.aggregate([
    {
        # Group persons by company_id and count employees per company
        "$group": {
            "_id": "$company_id",              # Group by company_id
            "num_employees": {"$sum": 1}       # Count documents in each group
        }
    },
    {
        # Join the grouped results with companies collection to get company names
        "$lookup": {
            "from": "companies_m1",           # Target collection
            "localField": "_id",              # company_id from the group stage
            "foreignField": "_id",            # _id from companies collection
            "as": "company"                   # Name for joined data
        }
    },
    {
        # Convert company array to single object
        "$unwind": "$company"
    },
    {
        # Project the final result with company name and employee count
        "$project": {
            "_id": 0,                         # Exclude _id
            "company_name": "$company.name",  # Company name from joined data
            "num_employees": 1 }}])               # Include employee count 

q2_time = time.time() - start
print(f"Q2 execution time: {q2_time:.4f}s")


# Q3: For each person born before 1988, update their age to "30"
start = time.time()
result_q3 = persons_col.update_many(
    {"birth_year": {"$lt": 1988}},    # Filter: find persons born before 1988
    {"$set": {"age": 30}}             # Update: set age field to 30
)
q3_time = time.time() - start
print(f"Q3 execution time: {q3_time:.4f}s")
print(f"Q3 updated {result_q3.modified_count} documents")

# Q4: Update company names to include "Company"
start = time.time()
result_q4 = companies_col.update_many(
    {},                               # Empty filter: update all companies
    [{"$set": {"name": {"$concat": ["$name", " Company"]}}}])  # concatenate " Company" to existing name
q4_time = time.time() - start
print(f"Q4 execution time: {q4_time:.4f}s")
print(f"Q4 updated {result_q4.modified_count} documents")

print("\n=== SUMMARY ===")
print(f"Total companies: {companies_col.count_documents({})}")
print(f"Total persons: {persons_col.count_documents({})}")
